--CREATED DATABASE SALESORDERS
CREATE DATABASE SALES_ORDERS; 
GO

--IMPORTED EXCEL FIILE INTO DATABASE ADJUSTED DATATYPE, DECIMAL PLACES AND SET PK TO THE FIRST COLUMN INVOICE_ID

--USED SELECT STATEMENT TO RETRIEVE ALL RECORDS
SELECT *
  FROM [dbo].[supermarket_sales]

  --QUERY FOR ORDERS PLACED IN MARCH 2019
  SELECT * FROM supermarket_sales
  WHERE DATE >= '2019-03-01' AND DATE <'2019-04-01'

  --QUERY TO RETURN ORDERS PLACED IN THE LAST DAY OF EACH MONTH FOR EACH CITY
  SELECT INVOICE_ID, CITY, PRODUCT_LINE, TOTAL, DATE
  FROM supermarket_sales
  WHERE DATE = EOMONTH(DATE)
  ORDER BY DATE ASC

  --QUERY TO RETURN THE THE TOTAL VALUE GREATER THAN 500 AND ORDERED BY TOTAL VALUE
SELECT INVOICE_ID, CITY, PRODUCT_LINE, TOTAL AS [TOTAL VALUE]
FROM supermarket_sales
GROUP BY INVOICE_ID, CITY, PRODUCT_LINE, TOTAL
HAVING TOTAL > 500
ORDER BY [TOTAL VALUE] DESC

--QUERY TO SEE THE TOP 3 CITY WITH THE TOTAL NUMBER OF TAX SORTED BY BRANCH
SELECT TOP 3 CITY, BRANCH, ROUND(SUM(TAX_5), 2) AS [TOTAL TAX]
FROM supermarket_sales
GROUP BY CITY, BRANCH
ORDER BY BRANCH ASC

--QUERY TO CALCULATE ROW NUMBERS FOR DATE BASED ON THE ORDERS FOR EACH CUSTOMER SORTED BY MOST RECENT DATE
SELECT 
ROW_NUMBER() OVER(PARTITION BY DATE ORDER BY Invoice_ID ASC) AS [ROW COUNT], Invoice_ID, DATE
FROM supermarket_sales
ORDER BY DATE DESC

--QUERY TO CHECK TOP 10 STORE AND DEPT WITH HIGHEST RATINGS AND THE TOTAL AMOUNT GROSSED ORDER BY RATING
SELECT TOP 10 BRANCH, CITY, PRODUCT_LINE AS DEPARTMENT, MAX(RATING) AS [MOST RATING], SUM(GROSS_INCOME) AS [TOTAL AMOUNT GROSSED]
FROM supermarket_sales
GROUP BY BRANCH, CITY, PRODUCT_LINE
ORDER BY [MOST RATING] Desc

--QUERY TO RETURN RATING SCORE, CITY BRANCH AND PRODUCT LINE WHEN RATING ABOVE OR EQL 8 RETURN EXCELLENT, BELOW 5 RETURN LOW AND WHEN ABOVE AND EQL 5 RETURN HIGH ORDER BY RATING.
SELECT CITY, BRANCH, PRODUCT_LINE AS DEPARTMENT, RATING,
CASE
WHEN RATING >= '8' THEN 'Excellent'
WHEN RATING  >= '5' THEN 'High'
WHEN RATING < '5' THEN 'Low'
ELSE 'VeryLow' 
END AS [RATING SCORE]
FROM supermarket_sales
ORDER BY RATING DESC

-- QUERY TO RETURN ALL ORDERS BY MALE IN DIFFERENT CITIES, DATE ORDERED, DEPARTMENT AND THE TOTAL ORDER
SELECT DISTINCT CITY, PRODUCT_LINE AS DEPARTMENT, GENDER, SUM(TOTAL) AS [TOTAL ORDER]
FROM supermarket_sales
WHERE GENDER = 'MALE'
GROUP BY PRODUCT_LINE, GENDER, CITY
ORDER BY [TOTAL ORDER] DESC

-- QUERY TO RETURN COUNT OF FASHION ACCESSORIES BASED ON TOTAL ORDERED BY GENDER
SELECT CITY, GENDER, PRODUCT_LINE, COUNT(PRODUCT_LINE) AS [ORDER COUNT], SUM(TOTAL) AS [TOTAL ORDER]
FROM supermarket_sales
WHERE PRODUCT_LINE = 'FASHION ACCESSORIES'
GROUP BY CITY, GENDER, PRODUCT_LINE

-- QUERY TO SEE THE HIGHEST ORDER BY ORDER DATE, RETURN THE TIME, INVOICE ID, CITY AND DEPARTMENT
DECLARE @MAXID AS DECIMAL = (SELECT MAX(TOTAL) FROM supermarket_sales);
SELECT INVOICE_ID, CITY, TOTAL, PRODUCT_LINE AS DEPARTMENT, DATE, TIME 
FROM supermarket_sales
WHERE TOTAL = @MAXID

-- QUERY TO RETURN THE TOTAL SALES PER MONTH
SELECT YEAR(DATE) AS [SALES YEAR], MONTH(DATE) AS [SALES MONTH], SUM(TOTAL) AS [TOTAL ORDERS],
CASE 
WHEN MONTH(DATE) = '1' THEN 'January'
WHEN MONTH(DATE) = '2' THEN 'February'
WHEN MONTH(DATE) = '3' THEN 'March'
ELSE NULL
END AS [MONTH NAME]
FROM supermarket_sales
GROUP BY YEAR(DATE), MONTH(DATE)
ORDER BY [SALES MONTH] ASC
